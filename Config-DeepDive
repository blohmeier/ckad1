Check 1: Create and Consume a Secret using a Volume
Create a secret named app-secret in the yqe Namespace that stores key-value pair of password=abnaoieb2073xsj
Create a Pod that consumes the app-secret Secret using a Volume that mounts the Secret in the /etc/app directory. The Pod should be named app and run a memcached container.
{
#1 Create a secret named app-secret in the yqe Namespace that stores key-value pair of password=abnaoieb2073xsj
k -n yqe create secret generic --from-literal=password=abnaoieb2073xsj app-secret
#2 Create a Pod that consumes the app-secret Secret using a Volume that mounts the Secret in the /etc/app directory. The Pod should be named app and run a memcached container.
k -n yqe run app --image=memcached $dy > 1_pod.yml
vim 1_pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: app
spec:
  containers:
  - name: app
    image: memcached #add/edit below
    volumeMounts:
    - name: secret
      mountPath: "/etc/app"
  volumes:
  - name: secret
    secret:
      secretName: app-secret
}
Check 2: Update Deployment with New Service Account
A Deployment named secapp has been created in the app namespace and currently uses the default ServiceAccount. Create a new ServiceAccount named secure-svc in the app namespace and then use it within the existing secapp Deployment, ensuring that the replicas now run with it.
{
#1 Create a new ServiceAccount named secure-svc in the app namespace 
k create sa -n app secure-svc
#2 and then use it within the existing secapp Deployment, ensuring that the replicas now run with it.
k explain deploy --recursive | less #find placement of "serviceAccountName" object
k edit deploy secapp -n app #insert name of created sa at appropriate spot in manifest file
}
Check 3: Pod Security Context Configuration
Create a pod named secpod in the dnn namespace which includes 2 containers named c1 and c2. Both containers must be configured to run the bash image, and should execute the command /usr/local/bin/bash -c sleep 3600. Container c1 should run as user ID 1000, and container c2 should run as user ID 2000. Both containers should use file system group ID 3000.
{
#1 Create a pod named secpod in the dnn namespace which includes 2 containers named c1 and c2. Both containers must be configured to run the bash image, and should execute the command /usr/local/bin/bash -c sleep 3600. 
k run -n dnn secpod --image=bash $dy --command -- /usr/local/bin/bash -c sleep 3600 > 3_pod.yml
vim 3_pod.yml
apiVersion: v1
kind: Pod 
metadata:
  creationTimestamp: null
  labels:			#delete
    run: secpod		#delete
  name: secpod
  namespace: dnn 
spec:
  securityContext:	#add
   fsGroup: 3000	#add
  containers:
  - command:	#args?
    - /usr/local/bin/bash
    - -c
    - sleep
    - "3600"
    image: bash
	securityContext:
	  runAsUser: 1000
    name: secpod	#c1; copy from here up to "- command:" and paste below for c2
	
    resources: {}	#delete
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

#2 Container c1 should run as user ID 1000, and container c2 should run as user ID 2000. Both containers should use file system group ID 3000. ##EDIT MORE LATER --- !!! BE CAREFUL ON THE SLEEP COMMAND - IF ALONE ON LINE, CONTAINER NEVER COMES UP!!!
apiVersion: v1
kind: Pod 
metadata:
  name: secpod
  namespace: dnn 
spec:
  securityContext:
    fsGroup: 3000
  containers:
  - args:
    - usr/local/bin/bash
    - -c
    - sleep 3600
    image: bash
    name: c1
    securityContext:
      runAsUser: 1000
  - args:
    - usr/local/bin/bash
    - -c
    - sleep 3600
    image: bash
    name: c2
    securityContext:
      runAsUser: 2000
}
Check 4: Pod Resource Constraints
Create a new Pod named web1 in the ca100 namespace using the nginx image. Ensure that it has the following 2 labels env=prod and type=processor. Configure it with a memory request of 100Mi and a memory limit at 200Mi. Expose the pod on port 80.
{
1# Can do all but request/limit with kubectl:
k run -n ca100 web1 --image=nginx --labels="env=prod,type=processor" --port=80 $dy > 4_pod.yml
#2 Edit to add resource limits
apiVersion: v1
kind: Pod 
metadata:
  creationTimestamp: null
  labels:
    env: prod
    type: processor
  name: web1
  namespace: ca100
spec:
  containers:
  - image: nginx
    name: web1
    ports:
    - containerPort: 80
    resources: {} 	# Replace/add from here down as marked with "##"
	resources:			##
	  requests:			##
	    memory: 100Mi	##
	  limits:			##
	    memory: 200Mi	##
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
}
Check 5: Create a Pod with Config Map Environment Vars
Create a new ConfigMap named config1 in the ca200 namespace. The new ConfigMap should be created with the following 2 key/value pairs:
COLOUR=red
SPEED=fast
Launch a new Pod named redfastcar in the same ca200 namespace, using the image busybox. The redfastcar pod should expose the previous ConfigMap settings as environment variables inside the container. Configure the redfastcar pod to run the command:  /bin/sh -c "env | grep -E 'COLOUR|SPEED'; sleep 3600"
{
#1 Create ConfigMap
k create cm config1 -n ca200 --from-literal COLOUR=red --from-literal SPEED=fast
#2 Run pod
k run -n ca200 redfastcar --image=busybox $dy --command -- /bin/sh -c "env | grep -E 'COLOUR|SPEED'; sleep 3600" > 5_pod.yml
#3 vim 5_pod.yml and add ("##") configMap env configuration
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redfastcar
  name: redfastcar
  namespace: ca200
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - env | grep -E 'COLOUR|SPEED'; sleep 3600
    image: busybox
    name: redfastcar
    resources: {}
    envFrom:				##add
    - configMapRef:			##add
        name: config1		##add
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
}
